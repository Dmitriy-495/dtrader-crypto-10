import { DTraderCrypto } from "./core.js";

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ dtrader-crypto
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
 */
class DTraderServer {
  private dtrader: DTraderCrypto;

  constructor() {
    this.dtrader = new DTraderCrypto();
    console.log("üöÄ dtrader-crypto server v10.0.0 initializing...");
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  public async start(): Promise<void> {
    try {
      await this.dtrader.start();
      console.log("‚úÖ dtrader-crypto server started successfully!");
      console.log("üìç Client WebSocket available on port 8080");
      console.log("üîó Gate.io connection established");
    } catch (error) {
      console.log("‚ùå Failed to start server:", error);
      process.exit(1);
    }
  }

  /**
   * –ì—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
   */
  public async shutdown(): Promise<void> {
    console.log("üõë Shutting down dtrader-crypto server...");
    await this.dtrader.stop();
    console.log("üëã Server stopped gracefully");
    process.exit(0);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new DTraderServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on("SIGINT", () => {
  console.log("\nüìã Received SIGINT signal");
  server.shutdown();
});

process.on("SIGTERM", () => {
  console.log("\nüìã Received SIGTERM signal");
  server.shutdown();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on("uncaughtException", (error: Error) => {
  console.log("üí• Uncaught Exception:", error.message);
  process.exit(1);
});

process.on("unhandledRejection", (reason: any, promise: Promise<any>) => {
  console.log("üí• Unhandled Rejection at:", promise, "reason:", reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.start();
